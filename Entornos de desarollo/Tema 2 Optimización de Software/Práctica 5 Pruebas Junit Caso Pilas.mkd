Clase Pilas üóÇÔ∏è
La  clase Pilas que implementa una pila gen√©rica usando un Vector para almacenar elementos. Incluye las siguientes funcionalidades principales:

M√©todos principales:
pilavacia(): Verifica si la pila est√° vac√≠a.

apilar(Integer o): Agrega un elemento a la pila.

desapilar(): Retira el elemento m√°s reciente de la pila, lanzando una excepci√≥n personalizada ErrorPilaVacia si est√° vac√≠a.

getNumElements(): Devuelve el n√∫mero de elementos en la pila.

Excepci√≥n personalizada:
ErrorPilaVacia: Se lanza al intentar desapilar una pila vac√≠a.

Esta implementaci√≥n sigue la filosof√≠a de LIFO (√öltimo en entrar, primero en salir) de las pilas.

Que se pide hacer üìã
Crea la clase PilasTest del tipo Caso de prueba JUnit en Eclipse, que nos permita pasar las pruebas unitarias de caja blanca del m√©todo apilar. Para ello:

Analiza previamente:
El m√©todo apilar tiene un √∫nico flujo de ejecuci√≥n, pero debemos asegurarnos de probar los siguientes aspectos:

La pila aumenta su tama√±o en 1 despu√©s de apilar un elemento.

El elemento agregado se almacena correctamente en la posici√≥n correspondiente.

### Apoyo para realizar la pr√°ctica üõ†Ô∏è.

### 1. Crear la Clase de Pruebas:
Crea una nueva clase PilasTest en el directorio src.
Ll√°mala PilasTest para mantener la consistencia.
### Verificar que la pila est√© vac√≠a al inicio lo vamos hacer comenzando por
Importar las clases necesarias:
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

### Declara la clase de prueba y crea una instancia de la clase Pilas:
public class PilasTest {
    private Pilas pila;

### Usa @BeforeEach para inicializar la pila antes de cada prueba:
 @BeforeEach
    public void setUp() {
        pila = new Pilas();
    }

### Escribe la prueba para verificar si la pila est√° vac√≠a:
    @Test
    public void testPilaVaciaAlInicio() {
        assertEquals(0, pila.getNumElements(), "La pila deber√≠a estar vac√≠a al inicio.");
    }

### Verificar que la pila aumenta de tama√±o al apilar un elemento
### Escribe la prueba para apilar un elemento y verificar el tama√±o:
  @Test
    public void testApilarElemento() {
        pila.apilar(10); // Paso previo: agregar el  n√∫mero 10
        assertEquals(1, pila.getNumElements(), "La pila deber√≠a contener un elemento despu√©s de apilar.");
    }

### Verificar que el elemento correcto se desapila
Escribe la prueba para desapilar un elemento:
@Test
    public void testDesapilarElemento() {
        pila.apilar(20); // Paso previo: agregar el numero 20
        Integer desapilado = pila.desapilar(); // Realiza la acci√≥n de desapilar.
        assertEquals(20, desapilado, "El elemento desapilado deber√≠a ser 20.");
    }


### Verificar el tama√±o despu√©s de apilar y desapilar
Escribe la prueba para manipular la pila y verificar el tama√±o:
@Test
    public void testApilarYDesapilar() {
        pila.apilar(30); // Paso previo: apilar elementos.
        pila.apilar(40);
        pila.desapilar(); // Desapila un elemento.
        assertEquals(1, pila.getNumElements(), "La pila deber√≠a contener un solo elemento despu√©s de desapilar uno.");
    }

### Verificar el comportamiento al desapilar una pila vac√≠a
Escribe la prueba para manejar una pila vac√≠a:
@Test
    public void testDesapilarPilaVacia() {
        Integer desapilado = pila.desapilar(); // Intenta desapilar una pila vac√≠a.
        assertEquals(null, desapilado, "Desapilar una pila vac√≠a deber√≠a retornar null.");
    }


